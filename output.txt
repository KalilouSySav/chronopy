To create a chronometer application using the MVC (Model-View-Controller) pattern in Python, we will need the following core classes, functions, and methods:

1. Model:
   - Chronometer: Represents the chronometer and its functionality.
     - start(): Starts the chronometer.
     - stop(): Stops the chronometer.
     - reset(): Resets the chronometer.
     - get_elapsed_time(): Returns the elapsed time of the chronometer.

2. View:
   - ChronometerView: Handles the user interface for the chronometer.
     - display_time(time): Displays the current time on the UI.
     - display_start_button(): Displays the start button on the UI.
     - display_stop_button(): Displays the stop button on the UI.
     - display_reset_button(): Displays the reset button on the UI.

3. Controller:
   - ChronometerController: Handles the interaction between the model and view.
     - start_chronometer(): Starts the chronometer.
     - stop_chronometer(): Stops the chronometer.
     - reset_chronometer(): Resets the chronometer.

Now, let's create the necessary files and implement the code for each component.

1. chronometer.py (Model)

```python
from datetime import datetime, timedelta

class Chronometer:
    def __init__(self):
        self.start_time = None
        self.elapsed_time = timedelta()

    def start(self):
        self.start_time = datetime.now()

    def stop(self):
        if self.start_time:
            self.elapsed_time += datetime.now() - self.start_time
            self.start_time = None

    def reset(self):
        self.start_time = None
        self.elapsed_time = timedelta()

    def get_elapsed_time(self):
        if self.start_time:
            return self.elapsed_time + (datetime.now() - self.start_time)
        return self.elapsed_time
```

2. chronometer_view.py (View)

```python
class ChronometerView:
    def display_time(self, time):
        print(f"Elapsed Time: {time}")

    def display_start_button(self):
        print("Start Button")

    def display_stop_button(self):
        print("Stop Button")

    def display_reset_button(self):
        print("Reset Button")
```

3. chronometer_controller.py (Controller)

```python
class ChronometerController:
    def __init__(self, model, view):
        self.model = model
        self.view = view

    def start_chronometer(self):
        self.model.start()
        self.view.display_start_button()

    def stop_chronometer(self):
        self.model.stop()
        self.view.display_stop_button()

    def reset_chronometer(self):
        self.model.reset()
        self.view.display_reset_button()
```

4. main.py (Entrypoint)

```python
from chronometer import Chronometer
from chronometer_view import ChronometerView
from chronometer_controller import ChronometerController

if __name__ == "__main__":
    model = Chronometer()
    view = ChronometerView()
    controller = ChronometerController(model, view)

    controller.start_chronometer()
    controller.stop_chronometer()
    controller.reset_chronometer()
```

In this implementation, we have separated the Model, View, and Controller components into separate files. The `chronometer.py` file contains the Chronometer class, which represents the model. The `chronometer_view.py` file contains the ChronometerView class, which handles the UI. The `chronometer_controller.py` file contains the ChronometerController class, which handles the interaction between the model and view.

The `main.py` file serves as the entrypoint of the application. It creates instances of the model, view, and controller, and demonstrates the functionality by starting, stopping, and resetting the chronometer.

Please note that this is a simplified implementation for demonstration purposes. In a real-world application, you may need to use a GUI framework or web framework to create a more interactive user interface.